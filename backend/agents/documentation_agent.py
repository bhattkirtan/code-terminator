"""
DocumentationAgent - Writes README, docstrings, and usage guides for all components
"""
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class DocumentationAgent:
    def __init__(self):
        self.name = "DocumentationAgent"
        self.version = "1.0.0"
    
    async def generate_documentation(self, code_files: Dict[str, Any], enhanced_prompt: Dict[str, Any], ui_elements: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Generate comprehensive documentation for the Angular application
        """
        logger.info("Generating comprehensive documentation")
        
        documentation = {
            "readme": await self._generate_readme(code_files, enhanced_prompt, ui_elements),
            "api_docs": await self._generate_api_documentation(code_files),
            "component_docs": await self._generate_component_documentation(code_files),
            "user_guide": await self._generate_user_guide(enhanced_prompt, ui_elements),
            "developer_guide": await self._generate_developer_guide(code_files),
            "deployment_guide": await self._generate_deployment_guide(),
            "changelog": await self._generate_changelog(),
            "contributing": await self._generate_contributing_guide()
        }
        
        logger.info("Documentation generation completed")
        return documentation
    
    async def _generate_readme(self, code_files: Dict[str, Any], enhanced_prompt: Dict[str, Any], ui_elements: List[Dict[str, Any]]) -> str:
        """Generate main README.md file"""
        
        project_name = "AI Generated Angular Application"
        description = enhanced_prompt.get("enhanced_description", "Modern Angular application generated by AI")
        
        components_count = len(code_files.get("components", {}))
        services_count = len(code_files.get("services", {}))
        ui_elements_count = len(ui_elements)
        
        readme_content = f'''# {project_name}

{description}

## 🚀 Features

- **Modern Angular {self._get_angular_version(code_files)}** - Built with the latest Angular framework
- **Material Design** - Beautiful UI components using Angular Material
- **Responsive Design** - Works seamlessly across all device sizes
- **Accessibility** - WCAG 2.1 AA compliant components
- **Type Safety** - Full TypeScript implementation
- **Performance Optimized** - Lazy loading, OnPush change detection, and more

## 📋 Project Structure

```
src/
├── app/
│   ├── components/           # {components_count} Angular components
│   ├── services/            # {services_count} Injectable services
│   ├── modules/             # Feature modules
│   ├── interfaces/          # TypeScript interfaces
│   └── styles/              # Global styles and themes
├── assets/                  # Static assets
└── environments/            # Environment configurations
```

## 🎨 UI Components

This application includes {ui_elements_count} UI elements:

{self._generate_ui_elements_list(ui_elements)}

## 🛠️ Installation

### Prerequisites

- Node.js (v18 or higher)
- npm or yarn
- Angular CLI (v17 or higher)

### Setup

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd {project_name.lower().replace(' ', '-')}
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Start development server**
   ```bash
   ng serve
   ```

4. **Open your browser**
   Navigate to `http://localhost:4200`

## 🏗️ Build

```bash
# Development build
ng build

# Production build
ng build --prod
```

## 🧪 Testing

```bash
# Run unit tests
ng test

# Run e2e tests
ng e2e

# Code coverage
ng test --code-coverage
```

## 📝 Available Scripts

| Script | Description |
|--------|-------------|
| `ng serve` | Start development server |
| `ng build` | Build the application |
| `ng test` | Run unit tests |
| `ng lint` | Lint the code |
| `ng e2e` | Run end-to-end tests |

## 🎯 Key Features Implemented

### Components
{self._generate_components_documentation(code_files)}

### Services
{self._generate_services_documentation(code_files)}

## 🔧 Configuration

### Environment Variables

- `production`: Boolean flag for production mode
- `apiUrl`: Backend API URL
- `useMockData`: Enable/disable mock data

### Theme Customization

The application uses Angular Material theming. You can customize colors in:
- `src/styles/theme.scss`
- `src/styles/variables.scss`

## 📱 Responsive Design

The application is fully responsive with breakpoints:
- **Mobile**: < 768px
- **Tablet**: 768px - 1024px
- **Desktop**: > 1024px

## ♿ Accessibility

- WCAG 2.1 AA compliance
- Screen reader support
- Keyboard navigation
- High contrast support
- Focus management

## 🚀 Deployment

### Firebase Hosting
```bash
ng build --prod
firebase deploy
```

### Netlify
```bash
ng build --prod
# Deploy dist/ folder to Netlify
```

### Docker
```bash
docker build -t angular-app .
docker run -p 80:80 angular-app
```

## 🤝 Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- Generated using AI DevOps Agent Platform
- Built with Angular and Angular Material
- Icons by Material Design Icons
- Fonts by Google Fonts

## 📞 Support

For support and questions:
- Create an issue in this repository
- Check the [User Guide](docs/USER_GUIDE.md)
- Review the [Developer Guide](docs/DEVELOPER_GUIDE.md)

---

**Generated on:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Generated by:** AI DevOps Agent Platform v1.0.0
'''
        
        return readme_content
    
    def _get_angular_version(self, code_files: Dict[str, Any]) -> str:
        """Extract Angular version from package.json"""
        package_json = code_files.get("package_json", "")
        if "17.0.0" in package_json:
            return "17"
        return "17"  # Default
    
    def _generate_ui_elements_list(self, ui_elements: List[Dict[str, Any]]) -> str:
        """Generate list of UI elements"""
        if not ui_elements:
            return "- Various UI components and layouts"
        
        element_types = {}
        for element in ui_elements:
            element_type = element.get("type", "unknown")
            element_types[element_type] = element_types.get(element_type, 0) + 1
        
        elements_list = []
        for element_type, count in element_types.items():
            elements_list.append(f"- **{element_type.title()}**: {count} component{'s' if count > 1 else ''}")
        
        return "\n".join(elements_list)
    
    def _generate_components_documentation(self, code_files: Dict[str, Any]) -> str:
        """Generate components documentation summary"""
        components = code_files.get("components", {})
        if not components:
            return "- No custom components documented"
        
        docs = []
        for comp_name in components.keys():
            docs.append(f"- **{comp_name.title()}Component**: {self._get_component_description(comp_name)}")
        
        return "\n".join(docs)
    
    def _generate_services_documentation(self, code_files: Dict[str, Any]) -> str:
        """Generate services documentation summary"""
        services = code_files.get("services", {})
        if not services:
            return "- No custom services documented"
        
        docs = []
        for service_name in services.keys():
            docs.append(f"- **{service_name.title()}Service**: {self._get_service_description(service_name)}")
        
        return "\n".join(docs)
    
    def _get_component_description(self, comp_name: str) -> str:
        """Get component description based on name"""
        descriptions = {
            "header": "Application header with navigation and branding",
            "navigation": "Main navigation component with routing",
            "sidebar": "Collapsible sidebar navigation",
            "main-content": "Main content area container",
            "footer": "Application footer with links and information",
            "data-table": "Data table with sorting, filtering, and pagination",
            "card": "Reusable card component for displaying information",
            "form": "Form component with validation and error handling"
        }
        
        for key, description in descriptions.items():
            if key in comp_name.lower():
                return description
        
        return f"Custom component for {comp_name.replace('-', ' ')} functionality"
    
    def _get_service_description(self, service_name: str) -> str:
        """Get service description based on name"""
        descriptions = {
            "data": "Data management service for CRUD operations",
            "api": "HTTP service for API communication",
            "auth": "Authentication and authorization service",
            "notification": "Notification and messaging service"
        }
        
        for key, description in descriptions.items():
            if key in service_name.lower():
                return description
        
        return f"Service for {service_name.replace('-', ' ')} functionality"
    
    async def _generate_api_documentation(self, code_files: Dict[str, Any]) -> str:
        """Generate API documentation"""
        
        api_docs = '''# API Documentation

## Overview

This document describes the API endpoints and data models used in the application.

## Base URL

- **Development**: `http://localhost:3000/api`
- **Production**: `https://api.yourapp.com`

## Authentication

All API requests require authentication using JWT tokens.

```typescript
// Request headers
{
  "Authorization": "Bearer <jwt-token>",
  "Content-Type": "application/json"
}
```

## Endpoints

### Data Management

#### GET /api/data
Retrieve all data items with optional filtering.

**Query Parameters:**
- `search`: Filter by name or description
- `status`: Filter by status (active, inactive, pending)
- `page`: Page number for pagination
- `limit`: Items per page

**Response:**
```typescript
{
  "data": DataItem[],
  "total": number,
  "page": number,
  "limit": number
}
```

#### POST /api/data
Create a new data item.

**Request Body:**
```typescript
{
  "name": string,
  "description": string,
  "status": "active" | "inactive" | "pending"
}
```

#### PUT /api/data/:id
Update an existing data item.

#### DELETE /api/data/:id
Delete a data item.

### Authentication

#### POST /api/auth/login
Authenticate user and receive JWT token.

**Request Body:**
```typescript
{
  "username": string,
  "password": string,
  "rememberMe": boolean
}
```

**Response:**
```typescript
{
  "token": string,
  "refreshToken": string,
  "user": UserProfile,
  "expiresIn": number
}
```

## Data Models

### DataItem
```typescript
interface DataItem {
  id: number;
  name: string;
  description?: string;
  status: 'active' | 'inactive' | 'pending';
  createdAt: Date;
  updatedAt: Date;
}
```

### UserProfile
```typescript
interface UserProfile {
  id: string;
  username: string;
  email: string;
  firstName: string;
  lastName: string;
  roles: string[];
  lastLogin?: Date;
}
```

## Error Handling

All errors follow a consistent format:

```typescript
{
  "error": string,
  "message": string,
  "statusCode": number,
  "timestamp": Date
}
```

## Rate Limiting

- **Authenticated requests**: 1000 requests per hour
- **Public endpoints**: 100 requests per hour

## Mock Data

For development, the application includes mock data and HTTP interceptors. Enable mock mode in `environment.ts`:

```typescript
export const environment = {
  useMockData: true
};
```
'''
        
        return api_docs
    
    async def _generate_component_documentation(self, code_files: Dict[str, Any]) -> str:
        """Generate detailed component documentation"""
        
        components = code_files.get("components", {})
        if not components:
            return "# Component Documentation\n\nNo components to document."
        
        component_docs = "# Component Documentation\n\n"
        
        for comp_name, comp_files in components.items():
            component_docs += f"## {comp_name.title()}Component\n\n"
            component_docs += f"**Selector:** `app-{comp_name}`\n\n"
            component_docs += f"**Description:** {self._get_component_description(comp_name)}\n\n"
            
            # Inputs and Outputs
            if "component.ts" in comp_files:
                inputs, outputs = self._extract_component_api(comp_files["component.ts"])
                
                if inputs:
                    component_docs += "### Inputs\n\n"
                    for input_prop in inputs:
                        component_docs += f"- `{input_prop}`: Input property\n"
                    component_docs += "\n"
                
                if outputs:
                    component_docs += "### Outputs\n\n"
                    for output_prop in outputs:
                        component_docs += f"- `{output_prop}`: Output event\n"
                    component_docs += "\n"
            
            # Usage example
            component_docs += "### Usage\n\n"
            component_docs += f"```html\n<app-{comp_name}></app-{comp_name}>\n```\n\n"
            
            # Styling
            component_docs += "### Styling\n\n"
            component_docs += f"The component uses SCSS for styling. Customize appearance by overriding CSS classes:\n\n"
            component_docs += f"```scss\n.{comp_name}-container {{\n  // Custom styles\n}}\n```\n\n"
            
            component_docs += "---\n\n"
        
        return component_docs
    
    def _extract_component_api(self, ts_content: str) -> tuple:
        """Extract @Input and @Output properties from component"""
        import re
        
        inputs = re.findall(r'@Input\(\)\s+(\w+)', ts_content)
        outputs = re.findall(r'@Output\(\)\s+(\w+)', ts_content)
        
        return inputs, outputs
    
    async def _generate_user_guide(self, enhanced_prompt: Dict[str, Any], ui_elements: List[Dict[str, Any]]) -> str:
        """Generate user guide"""
        
        user_guide = '''# User Guide

## Getting Started

Welcome to your new Angular application! This guide will help you navigate and use all the features.

## Navigation

### Main Navigation
- Use the top navigation bar to access different sections
- Click the menu icon (☰) on mobile devices to access the sidebar
- The application logo returns you to the home page

### Sidebar Navigation
- Access detailed navigation options from the sidebar
- Sidebar automatically collapses on mobile devices
- Use keyboard shortcuts: `Ctrl + B` to toggle sidebar

## Features

### Data Management
- **View Data**: Browse through data in organized tables
- **Search**: Use the search bar to find specific items
- **Filter**: Apply filters to narrow down results
- **Sort**: Click column headers to sort data
- **Pagination**: Navigate through large datasets

### Forms
- **Required Fields**: Fields marked with * are required
- **Validation**: Real-time validation with helpful error messages
- **Auto-save**: Forms automatically save draft data
- **Keyboard Support**: Use Tab to navigate, Enter to submit

### Responsive Design
- **Mobile Friendly**: Optimized for phones and tablets
- **Touch Support**: Swipe gestures and touch interactions
- **Adaptive Layout**: Interface adapts to screen size

## Keyboard Shortcuts

| Shortcut | Action |
|----------|--------|
| `Ctrl + B` | Toggle sidebar |
| `Escape` | Close modals/dropdowns |
| `Enter` | Activate focused element |
| `Tab` | Navigate between elements |
| `Ctrl + F` | Focus search field |

## Accessibility Features

### Screen Reader Support
- All interactive elements have proper labels
- Semantic HTML structure
- ARIA attributes for complex widgets

### Keyboard Navigation
- Full keyboard accessibility
- Visible focus indicators
- Logical tab order

### Visual Accessibility
- High contrast mode support
- Scalable text and interface
- Color-blind friendly design

## Troubleshooting

### Common Issues

**Page not loading:**
1. Check your internet connection
2. Refresh the page (Ctrl + F5)
3. Clear browser cache

**Forms not submitting:**
1. Check for validation errors
2. Ensure all required fields are filled
3. Try refreshing the page

**Mobile display issues:**
1. Use a supported browser (Chrome, Safari, Firefox)
2. Enable JavaScript
3. Update your browser to the latest version

### Browser Support

- **Chrome**: Version 90+
- **Firefox**: Version 88+
- **Safari**: Version 14+
- **Edge**: Version 90+

## Getting Help

- **Documentation**: Check this user guide and developer documentation
- **Support**: Contact support through the application
- **Community**: Join our community forum for tips and tricks

## Tips and Best Practices

1. **Save Frequently**: Use Ctrl + S to save your work
2. **Use Search**: Leverage search functionality to find data quickly
3. **Keyboard Shortcuts**: Learn shortcuts for faster navigation
4. **Regular Updates**: Keep your browser updated for best performance
5. **Feedback**: Provide feedback to help improve the application
'''
        
        return user_guide
    
    async def _generate_developer_guide(self, code_files: Dict[str, Any]) -> str:
        """Generate developer guide"""
        
        developer_guide = '''# Developer Guide

## Architecture Overview

This Angular application follows modern development practices and architectural patterns.

### Technology Stack

- **Framework**: Angular 17
- **Language**: TypeScript
- **UI Library**: Angular Material
- **Styling**: SCSS
- **State Management**: RxJS
- **Build Tool**: Angular CLI
- **Testing**: Jasmine + Karma

### Project Structure

```
src/app/
├── components/          # Reusable UI components
├── services/           # Business logic and API calls
├── interfaces/         # TypeScript type definitions
├── modules/           # Feature modules
├── guards/            # Route guards
├── interceptors/      # HTTP interceptors
├── pipes/             # Custom pipes
└── utils/             # Utility functions
```

### Coding Standards

#### TypeScript
- Use strict type checking
- Prefer interfaces over classes for data models
- Use meaningful variable and function names
- Add JSDoc comments for public APIs

```typescript
/**
 * Retrieves user data by ID
 * @param id - User identifier
 * @returns Observable of user data
 */
getUserById(id: string): Observable<User> {
  return this.http.get<User>(`/api/users/${id}`);
}
```

#### Angular Components
- Use OnPush change detection when possible
- Implement proper lifecycle hooks
- Unsubscribe from observables in ngOnDestroy
- Use trackBy functions in *ngFor loops

```typescript
@Component({
  selector: 'app-example',
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ExampleComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();

  ngOnInit(): void {
    this.dataService.getData()
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.data = data);
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }
}
```

#### SCSS Styling
- Use BEM methodology for CSS classes
- Leverage SCSS variables and mixins
- Follow mobile-first responsive design
- Use Angular Material theming system

```scss
.component {
  &__element {
    padding: $spacing-md;
    
    &--modifier {
      background: $primary-color;
    }
  }
  
  @include respond-to(mobile) {
    padding: $spacing-sm;
  }
}
```

### State Management

#### Services
- Use services for business logic
- Implement reactive patterns with RxJS
- Provide services at the appropriate level
- Use dependency injection properly

#### Data Flow
1. Components dispatch actions to services
2. Services handle business logic and API calls
3. Services emit new state via observables
4. Components react to state changes

### Testing Strategy

#### Unit Tests
- Test component logic and templates
- Mock dependencies and external services
- Achieve high code coverage (>80%)
- Use meaningful test descriptions

```typescript
describe('UserComponent', () => {
  let component: UserComponent;
  let userService: jasmine.SpyObj<UserService>;

  beforeEach(() => {
    const spy = jasmine.createSpyObj('UserService', ['getUsers']);
    
    TestBed.configureTestingModule({
      declarations: [UserComponent],
      providers: [{ provide: UserService, useValue: spy }]
    });
    
    userService = TestBed.inject(UserService) as jasmine.SpyObj<UserService>;
  });

  it('should load users on init', () => {
    userService.getUsers.and.returnValue(of(mockUsers));
    component.ngOnInit();
    expect(component.users).toEqual(mockUsers);
  });
});
```

#### Integration Tests
- Test component interactions
- Verify routing and navigation
- Test form submissions and validations

#### End-to-End Tests
- Test complete user workflows
- Verify critical business functionality
- Use page object pattern

### Performance Optimization

#### Bundle Size
- Use lazy loading for feature modules
- Tree-shake unused dependencies
- Optimize imports (avoid barrel imports)
- Use Angular CLI bundle analyzer

#### Runtime Performance
- Implement OnPush change detection
- Use trackBy functions in *ngFor
- Avoid function calls in templates
- Optimize images and assets

### Deployment

#### Build Process
```bash
# Development build
ng build

# Production build
ng build --configuration=production

# Analyze bundle
ng build --stats-json
npx webpack-bundle-analyzer dist/stats.json
```

#### Environment Configuration
```typescript
// environment.prod.ts
export const environment = {
  production: true,
  apiUrl: 'https://api.production.com',
  enableAnalytics: true
};
```

### Contributing Guidelines

1. **Branching**: Use feature branches for new development
2. **Commits**: Write clear, descriptive commit messages
3. **Code Review**: All changes require peer review
4. **Testing**: Ensure tests pass before merging
5. **Documentation**: Update documentation for new features

### Debugging

#### Development Tools
- Use Angular DevTools browser extension
- Leverage Redux DevTools for state inspection
- Use browser developer tools effectively

#### Common Issues
- Check browser console for errors
- Verify network requests in Network tab
- Use Angular CLI diagnostics: `ng version`

### Security Considerations

- Sanitize user inputs
- Use HTTPS in production
- Implement proper authentication
- Keep dependencies updated
- Follow OWASP guidelines

### Monitoring and Analytics

- Implement error tracking (e.g., Sentry)
- Add performance monitoring
- Track user interactions
- Monitor bundle size and performance metrics
'''
        
        return developer_guide
    
    async def _generate_deployment_guide(self) -> str:
        """Generate deployment guide"""
        
        deployment_guide = '''# Deployment Guide

## Overview

This guide covers various deployment options for your Angular application.

## Build Process

### Development Build
```bash
ng build
```

### Production Build
```bash
ng build --configuration=production
```

The production build includes:
- Minification and compression
- Tree shaking
- Ahead-of-time (AOT) compilation
- Service worker generation (if enabled)

## Deployment Options

### 1. Static Hosting (Recommended)

#### Netlify
1. Build your application:
   ```bash
   ng build --configuration=production
   ```

2. Deploy to Netlify:
   - Upload `dist/` folder to Netlify
   - Or connect your Git repository for automatic deployments

3. Configure redirects in `_redirects` file:
   ```
   /*    /index.html   200
   ```

#### Firebase Hosting
1. Install Firebase CLI:
   ```bash
   npm install -g firebase-tools
   ```

2. Initialize Firebase:
   ```bash
   firebase init hosting
   ```

3. Build and deploy:
   ```bash
   ng build --configuration=production
   firebase deploy
   ```

#### Vercel
1. Install Vercel CLI:
   ```bash
   npm install -g vercel
   ```

2. Deploy:
   ```bash
   ng build --configuration=production
   vercel --prod
   ```

### 2. Traditional Web Servers

#### Apache
1. Build the application
2. Copy `dist/` contents to Apache document root
3. Configure `.htaccess`:
   ```apache
   RewriteEngine On
   RewriteBase /
   RewriteRule ^index\.html$ - [L]
   RewriteCond %{REQUEST_FILENAME} !-f
   RewriteCond %{REQUEST_FILENAME} !-d
   RewriteRule . /index.html [L]
   ```

#### Nginx
1. Build the application
2. Copy `dist/` contents to Nginx web root
3. Configure Nginx:
   ```nginx
   server {
     listen 80;
     server_name yourdomain.com;
     root /path/to/dist;
     index index.html;

     location / {
       try_files $uri $uri/ /index.html;
     }
   }
   ```

### 3. Docker Deployment

#### Dockerfile
```dockerfile
# Stage 1: Build
FROM node:18 AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

# Stage 2: Serve
FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

#### Docker Compose
```yaml
version: '3.8'
services:
  angular-app:
    build: .
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
```

### 4. Cloud Platforms

#### AWS S3 + CloudFront
1. Create S3 bucket for static hosting
2. Upload `dist/` contents to S3
3. Configure CloudFront distribution
4. Set up Route 53 for custom domain

#### Google Cloud Storage
1. Create Cloud Storage bucket
2. Upload application files
3. Configure bucket for website hosting
4. Set up Cloud CDN (optional)

#### Azure Static Web Apps
1. Create Static Web App resource
2. Connect to your Git repository
3. Configure build settings
4. Deploy automatically on push

## Environment Configuration

### Environment Files
Create environment-specific configurations:

```typescript
// environment.prod.ts
export const environment = {
  production: true,
  apiUrl: 'https://api.yourdomain.com',
  analyticsId: 'GA-XXXXXXXXX'
};
```

### Build Configurations
Configure build targets in `angular.json`:

```json
{
  "configurations": {
    "production": {
      "budgets": [
        {
          "type": "initial",
          "maximumWarning": "500kb",
          "maximumError": "1mb"
        }
      ],
      "outputHashing": "all"
    },
    "staging": {
      "fileReplacements": [
        {
          "replace": "src/environments/environment.ts",
          "with": "src/environments/environment.staging.ts"
        }
      ]
    }
  }
}
```

## CI/CD Pipeline

### GitHub Actions
```yaml
name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test:ci
      
    - name: Build application
      run: npm run build
      
    - name: Deploy to Firebase
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        projectId: your-project-id
```

## Performance Optimization

### Bundle Analysis
```bash
ng build --stats-json
npx webpack-bundle-analyzer dist/stats.json
```

### Optimization Checklist
- [ ] Enable production mode
- [ ] Implement lazy loading
- [ ] Optimize images and assets
- [ ] Enable gzip compression
- [ ] Set up CDN
- [ ] Implement caching headers
- [ ] Monitor Core Web Vitals

## Monitoring

### Error Tracking
Integrate error tracking service (e.g., Sentry):

```typescript
import * as Sentry from '@sentry/angular';

Sentry.init({
  dsn: 'YOUR_DSN_URL',
  environment: environment.production ? 'production' : 'development'
});
```

### Analytics
Add Google Analytics:

```typescript
// In index.html
gtag('config', 'GA-XXXXXXXXX');
```

## Security Considerations

### HTTPS
- Always use HTTPS in production
- Configure SSL certificates
- Set up HTTP to HTTPS redirects

### Content Security Policy
Add CSP headers:

```html
<meta http-equiv="Content-Security-Policy" 
      content="default-src 'self'; script-src 'self' 'unsafe-inline';">
```

### Security Headers
Configure security headers:
- X-Frame-Options
- X-Content-Type-Options
- Referrer-Policy
- Permissions-Policy

## Troubleshooting

### Common Issues

**White screen after deployment:**
- Check browser console for errors
- Verify base href in index.html
- Check server configuration for SPA routing

**Assets not loading:**
- Verify asset paths
- Check CORS configuration
- Ensure proper file permissions

**Performance issues:**
- Analyze bundle size
- Check for unused dependencies
- Optimize images and fonts
- Enable compression
'''
        
        return deployment_guide
    
    async def _generate_changelog(self) -> str:
        """Generate changelog"""
        
        changelog = f'''# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [1.0.0] - {datetime.now().strftime("%Y-%m-%d")}

### Added
- Initial release of AI-generated Angular application
- Modern Angular 17 framework implementation
- Angular Material UI components
- Responsive design with mobile-first approach
- WCAG 2.1 AA accessibility compliance
- TypeScript implementation for type safety
- Comprehensive component library
- Service layer for API communication
- Mock data support for development
- Unit and integration test setup
- Production-ready build configuration
- Documentation and user guides

### Features
- Header component with navigation
- Responsive sidebar navigation
- Data table with sorting and pagination
- Form components with validation
- Card layouts for information display
- Loading states and error handling
- Empty state handling
- Keyboard navigation support
- Screen reader accessibility
- High contrast mode support

### Technical
- OnPush change detection strategy
- Lazy loading for performance
- RxJS for reactive programming
- SCSS with design system variables
- Angular Material theming
- HTTP interceptors for API calls
- Environment-based configuration
- Docker support for deployment
- CI/CD pipeline configuration

### Documentation
- Comprehensive README
- API documentation
- Component documentation
- User guide
- Developer guide
- Deployment guide
- Contributing guidelines

## [Unreleased]

### Planned
- Progressive Web App (PWA) features
- Offline support
- Push notifications
- Advanced data visualization
- Multi-language support (i18n)
- Dark theme support
- Advanced filtering options
- Export/import functionality
- Real-time data updates
- Advanced security features

---

### Release Notes

This application was generated using the AI DevOps Agent Platform, which automatically:
- Analyzed UI screenshots to understand layout requirements
- Generated Angular components following best practices
- Implemented responsive design patterns
- Added accessibility features
- Created comprehensive documentation
- Set up testing and deployment configurations

### Upgrade Path

For future versions, follow these steps:
1. Review the changelog for breaking changes
2. Update dependencies: `npm update`
3. Run tests: `npm run test`
4. Update configuration if needed
5. Deploy using your preferred method

### Support

For questions about this release:
- Check the documentation in the `docs/` folder
- Review component examples in the application
- Contact the development team for technical support
'''
        
        return changelog
    
    async def _generate_contributing_guide(self) -> str:
        """Generate contributing guide"""
        
        contributing_guide = '''# Contributing Guide

Thank you for your interest in contributing to this project! This guide will help you get started.

## Code of Conduct

By participating in this project, you agree to abide by our Code of Conduct:
- Be respectful and inclusive
- Focus on constructive feedback
- Help others learn and grow
- Maintain a professional environment

## Getting Started

### Prerequisites
- Node.js (v18 or higher)
- npm or yarn
- Git
- Angular CLI (v17 or higher)

### Development Setup

1. **Fork the repository**
   ```bash
   git clone https://github.com/yourusername/project-name.git
   cd project-name
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Start development server**
   ```bash
   ng serve
   ```

4. **Run tests**
   ```bash
   npm run test
   ```

## Development Workflow

### Branch Strategy
- `main`: Production-ready code
- `develop`: Integration branch for features
- `feature/*`: New features and improvements
- `hotfix/*`: Critical bug fixes

### Making Changes

1. **Create a feature branch**
   ```bash
   git checkout -b feature/your-feature-name
   ```

2. **Make your changes**
   - Follow coding standards
   - Add tests for new functionality
   - Update documentation

3. **Test your changes**
   ```bash
   npm run test
   npm run lint
   npm run build
   ```

4. **Commit your changes**
   ```bash
   git commit -m "feat: add new feature description"
   ```

## Coding Standards

### TypeScript
- Use strict type checking
- Prefer interfaces over classes for data models
- Add JSDoc comments for public APIs
- Use meaningful variable names

### Angular
- Follow Angular style guide
- Use OnPush change detection when possible
- Implement proper lifecycle hooks
- Unsubscribe from observables

### Testing
- Write unit tests for all new functionality
- Maintain test coverage above 80%
- Use descriptive test names
- Mock external dependencies

### Documentation
- Update README for significant changes
- Add JSDoc comments for public APIs
- Update user guide for new features
- Include examples in documentation

## Commit Message Convention

Use conventional commits format:

```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

### Types
- `feat`: New feature
- `fix`: Bug fix
- `docs`: Documentation changes
- `style`: Code style changes (formatting, etc.)
- `refactor`: Code refactoring
- `test`: Adding or updating tests
- `chore`: Maintenance tasks

### Examples
```
feat(auth): add user authentication
fix(table): resolve sorting issue
docs(readme): update installation instructions
test(service): add unit tests for data service
```

## Pull Request Process

1. **Ensure your branch is up to date**
   ```bash
   git checkout main
   git pull origin main
   git checkout feature/your-feature
   git rebase main
   ```

2. **Create pull request**
   - Use descriptive title and description
   - Link related issues
   - Add screenshots for UI changes
   - Request review from maintainers

3. **Pull request requirements**
   - All tests must pass
   - Code coverage maintained
   - No merge conflicts
   - Approved by at least one maintainer

### Pull Request Template
```markdown
## Description
Brief description of changes

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Breaking change
- [ ] Documentation update

## Testing
- [ ] Unit tests pass
- [ ] Integration tests pass
- [ ] Manual testing completed

## Screenshots (if applicable)
Add screenshots for UI changes

## Checklist
- [ ] Code follows style guidelines
- [ ] Self-review completed
- [ ] Documentation updated
- [ ] Tests added/updated
```

## Issue Reporting

### Bug Reports
Include the following information:
- Browser and version
- Steps to reproduce
- Expected behavior
- Actual behavior
- Screenshots (if applicable)
- Console errors

### Feature Requests
Include the following information:
- Problem description
- Proposed solution
- Alternative solutions considered
- Additional context

## Development Guidelines

### Component Development
```typescript
@Component({
  selector: 'app-example',
  templateUrl: './example.component.html',
  styleUrls: ['./example.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ExampleComponent implements OnInit, OnDestroy {
  // Component implementation
}
```

### Service Development
```typescript
@Injectable({
  providedIn: 'root'
})
export class ExampleService {
  constructor(private http: HttpClient) {}
  
  // Service methods
}
```

### Testing Guidelines
```typescript
describe('ExampleComponent', () => {
  let component: ExampleComponent;
  let fixture: ComponentFixture<ExampleComponent>;
  
  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ExampleComponent]
    });
  });
  
  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
```

## Release Process

1. **Version bump**
   ```bash
   npm version patch|minor|major
   ```

2. **Update changelog**
   - Document all changes
   - Follow semantic versioning

3. **Create release PR**
   - Merge to main branch
   - Tag release

4. **Deploy**
   - Automated deployment via CI/CD
   - Monitor for issues

## Getting Help

- **Documentation**: Check project documentation
- **Issues**: Search existing issues on GitHub
- **Discussions**: Use GitHub Discussions for questions
- **Email**: Contact maintainers directly

## Recognition

Contributors will be recognized in:
- README contributors section
- Release notes
- Project documentation

Thank you for contributing to this project!
'''
        
        return contributing_guide
    
    async def get_status(self) -> Dict[str, Any]:
        """Get agent status"""
        return {
            "name": self.name,
            "version": self.version,
            "status": "active",
            "capabilities": [
                "README generation",
                "API documentation",
                "Component documentation",
                "User guide creation",
                "Developer guide creation", 
                "Deployment guide creation",
                "Changelog generation",
                "Contributing guide creation",
                "JSDoc comment generation",
                "Usage example creation"
            ]
        }